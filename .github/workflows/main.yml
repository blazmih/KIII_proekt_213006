name: Build, Test, Code Scan, and Deploy

on:
  push:
    branches:
      - master  

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code from GitHub
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    # Step 3: Cache Maven dependencies for faster builds
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven

    # Step 4: Build the Java project using Maven
    - name: Build with Maven
      run: mvn clean install -DskipTests

    # Step 5: Run CodeQL analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
        build-command: 'mvn clean install -DskipTests'

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: 'code-scanning'
        upload: true  

    # Step 6: Install Node.js for HTMLHint
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  

    # Step 7: Install HTMLHint
    - name: Install HTMLHint
      run: npm install -g htmlhint

    # Step 8: Lint HTML files
    - name: Run HTMLHint
      run: htmlhint "src/main/resources/templates/**/*.html"  

    # Step 9: Build Docker image
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/KIII_proekt_213006:latest .

    # Step 10: Login to DockerHub
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Step 11: Push Docker image to DockerHub
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/KIII_proekt_213006:latest
